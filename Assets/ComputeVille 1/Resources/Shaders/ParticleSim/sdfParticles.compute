#pragma kernel CSMain

float _DT;
float _Time;

int _ParticleCount;
int _VolDim;
float3 _Pos;
float3 _Dir = float3(0,1,0);
float3 _Vel;
float3 _Center;
float3 _Extents;

float _Volume;

float4x4 _InverseTransform;
float4x4 _Transform;


#include "../Chunks/snoise.cginc"
#include "../Chunks/noise.cginc"
#include "../Chunks/sdfStruct.cginc"

float4x4 transform;



  struct Vert{
    float3 pos;
    float3 vel;
    float3 ogPos;
    float2 uv;
    float life;  // lifetime of particle
    float cap;   // connection information
    float3 debug; //
  };




RWStructuredBuffer<Vert> vertBuffer;

Texture3D<float4> sdfTexture;

SamplerState MyLinearClampSampler;

#include "../Chunks/curlNoise.cginc"


#define NR_THREADS 128


float3 getNormal(){


}
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {


  uint pID = threadID + u3GroupID.x * NR_THREADS;

  uint flip = pID % 2;

  if( pID < uint(_ParticleCount) ){

    Vert vert = vertBuffer[ pID ];

    float3 tmpPos = vert.pos - _Center;

    float3 force = float3(0,0,0);

    force += curlNoise( vert.pos * 3) * 10;
    if( abs(_Extents.x) > .1 && abs(_Extents.y) > .1 && abs(_Extents.z) > .1){
        float3 nPos = tmpPos / _Extents;

        float3 tmpPos = mul( _InverseTransform ,float4(vert.pos,1));
        float3 fV = (((tmpPos-_Center) / _Extents) + 1)/2 ;

        float3 outside = float3(0,0,0);

        if( fV.x < 0 ){ outside += float3(1,0,0); }
        if( fV.x > 1 ){ outside -= float3(1,0,0); }

        if( fV.y < 0 ){ outside += float3(0,1,0); }
        if( fV.y > 1 ){ outside -= float3(0,1,0); }

        if( fV.z < 0 ){ outside += float3(0,0,1); }
        if( fV.z > 1 ){ outside -= float3(0,0,1); }



        float4 field = sdfTexture.SampleLevel(MyLinearClampSampler,fV,0);

             float3 nor = normalize(mul(_Transform , float4(-field.yzw,0)).xyz);

           //  float fDist = (field.x -.1);

          force += float3( sin(float(pID*100)) ,sin(float(pID*400)) ,sin(float(pID*200))  );

 if( length(outside) == 0 ){
             float3 fNor = nor;// -field.nor;// * 2 -1;
             force += fNor*100 * field.x;

             float3 d = float3( 0,1,0);
            float3 c = cross( nor , d );
            force += c * 100;

            }else{
              force += outside*100;
            }
           vert.debug = float3(0,1,0);

    }


    float dampening = .9;//.99999;// - vert.life * .01;
    vert.vel += force * _DT * _DT;
    vert.pos += vert.vel * _DT;
    vert.vel *= dampening;


      vert.life -= .00000001;

      //vert.life -= .004;
      if( vert.life < 0 ){
        vert.life += 1;
        vert.pos = vert.ogPos;
        vert.vel = float3(0,0,0);
      }

    //vert.pos = float3( (hash(float(pID))-.5) * 2, 1.3, (hash(float(pID)*100)-.5) * 2);

    vertBuffer[pID] = vert;

}



}
