

#pragma kernel CSMain

struct Transfer{
    float3 pos;
    float3 nor;
    float3 tangent;
    float2 uv;
    float  debug;
};


struct Vert{
  float3 pos;
  float3 oPos;
  float3 nor;
  float3 tangent;
  float3 bitangent;
  float idDown;
  float idUp;
  float2 uv;
  float debug;
};


RWStructuredBuffer<Transfer> transferBuffer;
RWStructuredBuffer<Vert> vertBuffer;

int _RopeVerts;
int _TubeWidth;
int _TubeLength;
int _Count;

#include "../Chunks/cubicCurve.cginc"

float3 cubicFromValue( in float val , out float3 upPos , out float3 doPos ){

  float3 p0 = float3( 0. , 0. , 0. );
  float3 v0 = float3( 0. , 0. , 0. );
  float3 p1 = float3( 0. , 0. , 0. );
  float3 v1 = float3( 0. , 0. , 0. );

  float3 p2 = float3( 0. , 0. , 0. );

  float vPP = float(_RopeVerts);

  float base = val * (vPP-1);

  int baseUp   = floor( base );
  int baseDown = ceil( base );
  float amount = base - float(baseUp);

  baseUp += 1;
  baseDown += 1;


  int bladeBase = 0;

  if( baseUp == 0 ){

    p0 = vertBuffer[ baseUp       ].pos;
    p1 = vertBuffer[ baseDown     ].pos;
    p2 = vertBuffer[ baseDown + 1 ].pos;

    v1 = .5 * ( p2 - p0 );

  }else if( baseDown == vPP-1 ){

    p0 = vertBuffer[ baseUp     ].pos;
    p1 = vertBuffer[ baseDown   ].pos;
    p2 = vertBuffer[ baseUp - 1 ].pos;

    v0 = .5 * ( p1 - p2 );

  }else{

    p0 = vertBuffer[ baseUp   ].pos;
    p1 = vertBuffer[ baseDown ].pos;


    float3 pMinus = float3(0,0,0);

    pMinus = vertBuffer[ baseUp   - 1 ].pos;
    p2 =     vertBuffer[ baseDown + 1 ].pos;

    v1 = .5 * ( p2 - p0 );
    v0 = .5 * ( p1 - pMinus );

  }

  float3 c0 = p0;
  float3 c1 = p0 + v0/3.;
  float3 c2 = p1 - v1/3.;
  float3 c3 = p1;

  float3 pos = cubicCurve( amount , c0 , c1 , c2 , c3 );

  upPos = cubicCurve( amount  + .001 , c0 , c1 , c2 , c3 );
  doPos = cubicCurve( amount  - .001 , c0 , c1 , c2 , c3 );

  return pos;

}

#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

   // int particleID = pID / ( _TubeLength * _TubeWidth);
   if( pID < _Count ){
    int row = pID / _TubeWidth;
    int col = pID % _TubeWidth;


    float rowVal = (3+float(row)) / (6+float(_TubeLength));
    float colVal = float(col)/float(_TubeWidth);

    float3 upPos; float3 doPos;

    float3 pos = cubicFromValue( rowVal , upPos , doPos );

    float3 d = normalize(upPos - pos);
    float3 x = normalize(cross( d , float3(0,1,0)) );
    float3 y = normalize(cross( x , d));

    float angle = colVal * 2*3.14159;

    float r = .005 *sin(3.14159*float(row)/float(_TubeLength));//sin( rowVal * 3.14159) * .02; + .001 * (1-rowVal);

    float3 outVec = (sin(angle) *x - cos(angle) * y);// * r;
    float3 fPos = pos + outVec * r;

    float2 fUV = float2( rowVal , colVal );
    float3 fNor = normalize( outVec );

    transferBuffer[pID].pos = fPos;
    transferBuffer[pID].nor = fNor;
//    transferBuffer[pID].tangent = fTan;
    transferBuffer[pID].uv = fUV;
  }

}
